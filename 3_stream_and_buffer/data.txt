 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

 Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Histoire

Texte brut

Apports et limitations

    Apports
    Limitations

Usage

Structure et propriétés

    Séquence de lignes
    Alignement vertical

Standardisation et normalisation

    Codage des caractères
        Rôle de l'ASCII
    Rôle du BOM
    Séquence d'échappement

Notes et références

    Notes
    Références

Voir aussi

        Articles connexes

Fichier texte

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Page d’aide sur l’homonymie

Pour les articles homonymes, voir TXT.
Fichier texte
Les 95 caractères et signes du codage ASCII
CaractéristiquesExtensions	
.txt, .text, -
Type MIME	
text/plain
PUID	
x-fmt/111

modifier - modifier le code - modifier WikidataDocumentation du modèle

En informatique, un fichier texte ou fichier texte brut ou fichier texte simple[réf. nécessaire] est un fichier dont le contenu représente uniquement une suite de caractères ; il utilise nécessairement une forme particulière de codage des caractères qui peut être une variante ou une extension du standard local des États-Unis, l'ASCII. Il n'existe aucune définition officielle, et les différentes interprétations de ce qu'est un fichier texte partagent des propriétés essentielles. Les caractères considérés sont généralement les caractères imprimables, d'espaces et de retours à la ligne. Certains codages de caractères normalisés incluent également certains caractères de contrôleN 1, séquence d'échappementN 2 ou marqueursN 3 qui peuvent faire l'objet de différences d'appréciations. La notion de fichier texte est donc subjective et dépend notamment des systèmes de codage de caractère considérés (windows-1252 et ISO-8859-1 n'offrant pas les mêmes plages de valeurs «imprimables».)

Un fichier « non texte » est appelé « fichier binaire », dans le sens où les bits contenus dans le fichier ne représentent pas une simple suite de caractères imprimables, d'espaces et de retours à la ligne.
Histoire
Un fichier en carte perforée
Extrait d'un programme écrit en BASIC
Copie papier d'un code source (en Fortran) des années 1970, imprimé sur du papier continu, dédié aux fichiers textes.

La notion de fichier texte a évolué avec l'histoire de l'informatique.

Le mot fichier (« file » en anglais) a été utilisé publiquement dans le contexte d'un enregistrement informatique déjà en février 1950. Une publicité de la radio Radio Corporation of America de Popular Science Magazine1 décrivant une nouvelle mémoire à tube à vide qu'elle avait développée, expliquait :

    «...the results of countless computations can be kept "on file" and taken out again. Such a "file" now exists in a "memory" tube developed at RCA Laboratories. Electronically it retains figures fed into calculating machines, holds them in storage while it memorizes new ones - speeds intelligent solutions through mazes of mathematics. »

En 1952 un fichier était utilisé pour désigner l'information enregistrée sur une carte perforée.

Or il se trouve que les cartes perforées partageaient certaines propriétés:

    Chaque carte représentait une ligne de 80 colonnes (en général)
    Les programmes (code source) étaient écrits en assemblant des lignes de textes
    Les cartes perforées qui ne contenaient pas de texte étaient donc déjà différentes.

En 1971, le RFC 2652 indique qu'un fichier peut être ASCII, cœur d'exécutable, ou autre. Il mentionne notamment l'EBCDIC.

En juillet 1972, le RFC 3543, discutant des échanges de texte par le protocole réseau NVT-ASCIIN 4 FTP, indique que les fichiers textes sont enregistrés de manières différentes selon les systèmes :

    le PDP-10 enregistre le NVT-ASCII en 7-bits justifiés à gauche dans des mots de 36 bits ;
    le 360's enregistre le texte avec un codage EBCDIC 8-bit ;
    Multics enregistre le texte avec quatre caractère de neuf bits dans des mots de 36 bits.

Il indique donc que pour le bon transfert des textes, il est nécessaire que les deux parties effectuent leur part respective de la conversion dans un codage commun; il s'agit à cette époque de l'ASCII 8 bits, dit NVT.

Cette même année, la RFC fait apparaître le besoin d'une unité commune pour transmettre des données binaires entre systèmes dont les mots n'ont pas la même taille, et suggère l'utilisation de byte de 8 bits, c'est-à-dire de ce que l'on appelle aujourd'hui des octets, tout en permettant l'utilisation de bytes/mots différents si négocié.

En 1980, le RFC 7654 en spécifiant le protocole FTP indique les trois raisons occasionnant le transfert d'un fichier : l'impression, l'archivage, et le traitement. Constatant, que le seul encodage n'est pas une métainformation suffisante, il spécifie le reste et notamment les différents mécanismes de changement de ligne à travers des caractères de contrôle ou de défilement de lignes. En page 12, le RFC clarifie que les fichiers textes sont tout aussi bien des fichiers ASCII que des fichiers EBCDIC.

En 1985, lors de l'élaboration du protocole FTP de transfert de fichier, il a été recommandé de considérer comme fichier texte (en anglais "text" files), deux formats de fichiers :

    les fichiers file structure, où le fichier est considéré être une séquence continue de lignes.
    les fichiers record-structure, où le fichier est constitué d'enregistrements séquentielsN 5

De même les types ASCII et EBCDIC ont été acceptés comme fichier texte5.
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?
Texte brut
Article détaillé : Texte brut.

Texte brut Unicode (Unicode plain text)

De nos jours, l'Unicode est de plus en plus reconnu comme format de texte brut. Le standard Unicode définit selon ses propres termes ce qu'est le texte brut, sous le terme de plain text, dans sa version anglaise.

La notion de fichier texte se rapproche donc des propriétés que le standard Unicode attribue au format nommé plain text en langue anglaise et signifiant texte brut.

Généralités et controverses

La notion de texte brut (plain text) a, comme la notion de texte enrichi (fancy text), été introduite par Unicode6.

La notion de plain text peut être traduite par texte en clair, pur texte, texte pur, ou texte brut6.

Linux Information Project en donne une vision restrictive.

Format de codage

Si l'encodage est inconnu, un texte brut quelconque est inexploitable.

Texte brut approché en mathématiques

Alors que les mathématiques sont un langage international, en tout ou partie, leur représentation informatique a pu être négligée lors de la création de différents systèmes de codage des caractères. Toutefois, ces symboles ont bénéficié d'une forte prise en charge par l'Unicode7, offrant de nouvelles perspectives.

Histoire

La notion de texte brut est implicitement assez ancienne puisque vraisemblablement elle remonte sans doute au moins si ce n'est à la notion de machine à écrire, aux premiers langages de programmation utilisant cette technologie.

Dans son aspect réseau, elle est consignée dans de nombreux RFC.

Protocole et fichier

L'usage du texte brut peut varier entre protocole et ficher. Ceci peut généralement être invisible à l'utilisateur lorsqu'il copie un texte d'un logiciel à un autre.

Dans un protocole, le protocole spécifie généralement l'encodage utilisé, d'une manière ou d'une autre; la longueur du texte peut ne pas être limité, en fonction du protocole.

Un fichier a généralement une taille limitée, il est généralement admis qu'un système de fichier ne fournit pas d'information sur l'encodage utilisé pour encoder un texte brut donné. Cette information essentielle est alors déterminée à travers un ensemble d'heuristiques.
Apports et limitations

Le fichier texte est un élément déterminant en ce qu'il offre la possibilité de décrire des codes sources et de faciliter la programmation des ordinateurs.

Toutefois, il souffre de facto de nombreux problème d'interopérabilité.
Apports

Le fichier texte, lorsqu'il apparait apporte la possibilité de permettre à un humain de soumettre un texte au traitement automatique d'une machine. Il offre également la possibilité de supprimer et d'ajouter une ligne, et cela dès les cartes perforées. Cette fonctionnalité a été reprise par des logiciels comme ed ou edlin.
Limitations

Un fichier texte est limité dans sa taille, comme le sont tous les fichiers, par le système de gestion de fichiers.

De plus par convention on limite volontairement le nombre de colonnes. Une convention commune et ancienne est d'environ 80 ou 132 colonnes. Cela correspondait aux standards de terminaux physiques aujourd'hui dépassés. Les éditeurs modernes savent souvent gérer des lignes plus longues bien que cela ne soit pas conseillé pour des questions de présentation.

Le fichier texte peut poser de nombreux problèmes d'interopérabilité (pour cause d'encodage différents) entre pays, entre fournisseurs de logiciels, notamment.
Usage

Les fichiers texte sont utilisés par de nombreux logiciels pour conserver les données de configuration. Ils sont également utilisés pour contenir les textes écrits en langages de programmation. En outre, la plupart des langages de programmation offrent des fonctions prédéfinies pour manipuler du texte brut, ce qui rend la gestion des fichiers textes particulièrement accessible.

Le logiciel utilisé pour éditer un fichier texte est un éditeur de texte. Dans le cas général, un traitement de texte ne produit pas des fichiers texte. En effet, un traitement de texte n'a pas seulement besoin de manipuler du texte brut, mais également des informations sur la fonte de caractère utilisée, la disposition des caractères dans des pages, les styles typographiques, etc. Toutefois, les traitements de texte peuvent ouvrir ou sauvegarder un fichier texte, aucune information de mise en forme n'étant conservée, sauf le cas échéant les sauts de ligne.

Un fichier texte peut être la structure sous-jacente d'un fichier journal8.
Structure et propriétés

La structure d'un fichier texte est une séquence de lignes. Toutefois, historiquement, chaque caractère est aligné verticalement, c'est encore le cas aujourd'hui, dans un éditeur de texte en ligne ou local.
Séquence de lignes

Le concept de séquence de lignes reste une caractéristique forte d'un fichier texte.

Un fichier texte peut simplement contenir du texte dans une langue quelconque. Dans ce cas, aujourd'hui, il ne respecte plus aucune structure particulière.

Il était une fois une marchande de foie
qui vendait du foie dans la Ville de Foix.
Elle se dit «ma foi c'est la première fois
que je vends du foie dans la ville de Foix !»

 using (FileStream stm = new FileStream("logfile.txt", FileMode.Create)) {
      return ProcessStuff(stm);                  //
 }

Un fichier texte peut également contenir une donnée structurée qui peut être analysée par un logiciel et affichée sous une forme plus évoluée, par exemple une page web :

 <!DOCTYPE html>
 <html lang="fr">
  <head><title>Page web d'exemple</title></head>
  <body>
   <p>Ceci est une page web d'exemple.</p>
  </body>
 </html>

Alignement vertical

Un fichier texte est généralement rendu visible avec des polices à chasse fixe alignant le texte verticalement. L'arrivée d'un grand nombre de caractères Unicode dans les fichiers textes peut questionner ce concept.

Enfin, et de manière plus anecdotique, le propos d'un fichier texte peut être détourné pour contenir une image, c'est ce qu'on appelle l'art ASCII :


  (\___/)       (*) (*)        \ /
  (=*.*=)        (°_°)        {^o^}
 (")___(")     (+)   (+)     (| . |)
                (_) (_)      (_) (_)

Cet art nécessite toutefois que tous les caractères affichés aient la même largeur.

Cette technologie a notamment été utilisée pour spécifier des protocoles de transfert de fichier.

Utilisation de l'art-ASCII comme élément de spécification du «FILE TRANSFER PROTOCOL» RFC 7654; année 1980:

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----:----/|    --------
                  ----------                |     V     |
                  |/------\|  FTP Commands  |/---------\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   FTP Replies  ||    PI   ||
                  |\--:---/|                |\----:----/|
                  |   V    |                |     V     |
      --------    |/------\|      Data      |/---------\|    --------
      | File |<--->|Server|<---------------->|  User   |<--->| File |
      |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
      --------    |\------/|                |\---------/|    --------
                  ----------                -------------

                  Server-FTP                   User-FTP

Standardisation et normalisation

Les fichiers textes peuvent connaitre des problèmes d'interopérabilité :

    Différence de traitement des changements de lignes : CR ; LF, NL ; CR+LF
    Présence ou absence éventuelle du marqueur magique BOM
    Différence de codage des caractères
    Différence de traitement des séquences d'échappement éventuelles.

Les variations de formats sont notamment liées aux intérêts régionaux: présence de caractères accentués ou d'alphabets particuliers. Les industries souhaitent également offrir de nouveaux caractères, en respectant tous les standards avec une rigueur inégale.
Codage des caractères

Comme tout fichier informatique, un fichier texte contient fondamentalement des bits. La particularité d'un fichier texte est que l'ensemble du fichier respecte un standard de codage des caractères. Il existe de nombreux standards de codage de caractères, ce qui peut rendre problématique la compatibilité des fichiers texte.
Rôle de l'ASCII

La dénomination « fichier ASCII » est souvent confusément (et/ou abusivement) utilisée à propos de fichiers texte n'utilisant pas le codage des caractères ASCII, soit pour marquer une opposition à l'EBCDIC, soit pour interdire l'utilisation de langues autre que l'anglais. Cela tient aussi à une histoire compliquée liée à l'influence et aux intérêts des États-Unis, pays de langue anglaise, et au fait qu'actuellement les fichiers textes sont généralement compatibles ASCII tout en ne se limitant pas à ces caractères. Ainsi des fichiers textes UTF-8 bénéficient d'une certaine interopérabilité avec des logiciels qui nécessitent des fichiers compatibles ASCII, contrairement aux fichiers textes UTF-16, qui nécessitent des logiciels spécifiquement adaptés à l'UTF-16.
Rôle du BOM
Article détaillé : Byte Order Mark.

Le BOM est une invention du standard Unicode. Il est parfois présent en début de fichier pour indiquer visuellement l'encodage d'un fichier (ce code dans un fichier UTF8 sera visualisé « ï»¿ » en iso8859-1). À ce titre, il s'agit d'un nombre magique au même titre que le shebang. Mais il est aussi et surtout utilisé pour déterminer l'ordre des octets (endianness) et cela peut poser des problèmes à certains logiciels.
Séquence d'échappement

Les séquences d'échappement peuvent également être traitées de manière inégales, alors que leur utilisation est impérative en ISO-2022, conduisant à l'apparition de mojibake au sens premier du mot.
Notes et références
Notes

Le standard des États-Unis, l'ASCII inclut des caractères de contrôle, tel que l'échappement de valeur 27.
les standards ISO-2022 sont bâtis sur ces séquences.
L'Unicode autorise l'utilisation d'un indicateur dénommé BOM.
ASCII 8 bits avec le bit sept, le plus fort, à 0.

    Ce qui pourrait signifier que chaque colonne avait un sens précis comme en Cobol et que la longueur des lignes était fixe, comme l'écran.

Références

Popular Science Magazine, February 1950, page 96 [archive]
(en) Request for comments no 265 [archive]
(en) Request for comments no 354 [archive]
(en) Request for comments no 765 [archive]
File Transfer Protocol : RFC 959, Network Working Group, octobre 1985 (lire en ligne [archive]), page 15
http://www.cairn.info/article.php?ID_ARTICLE=DN_063_0013 [archive]
Barbara Beeton, Asmus Freytag, Murray Sargent III, Unicode Technical Report

    25 “Unicode Support for Mathematics”, https://www.unicode.org/reports/tr25 [archive]

    « Log file - fichier journal », sur gouv.qc.ca via Wikiwix (consulté le 29 juin 2023).

Voir aussi
Articles connexes

    Fichier binaire
    Éditeur de texte
    Format de fichier
    Fichier

    icône décorative Portail de l’informatique icône décorative Portail de l’écriture 

Catégories :

    Format de données numériquesCodage du texteFormat ouvert

[+]

    La dernière modification de cette page a été faite le 10 avril 2024 à 10:09.



     Africa Creates! 
Now Open! Enter your photos, video and audio in the annual celebration of Africa! 
Réduire
Sommaire
Début
Différences avec AngularJS

Historique

    Nom
    Version 2.0.0
    Version 4.0.0
    Version 5.0.0
    Version 6.0.0
    Version 7.0.0
    Version 8.0.0
    Version 9.0.0
    Version 10.0.0
    Version 11.0.0
    Version 12.0.0
    Version 13.0.0
    Version 14.0.0
    Version 15.0.0
    Version 16.0.0
    Version 17.0.0
    Politique d'évolution
    Politique de support

Notes et références

Annexes

        Articles connexes
        Liens externes

Angular

    Article
    Discussion

    Lire
    Modifier
    Modifier le code
    Voir l’historique

Outils

Si ce bandeau n'est plus pertinent, retirez-le. Cliquez ici pour en savoir plus.

Cet article doit être recyclé (septembre 2020).

Une réorganisation et une clarification du contenu paraissent nécessaires. Améliorez-le, discutez des points à améliorer ou précisez les sections à recycler en utilisant {{section à recycler}}.
Angular
Description de l'image Angular_full_color_logo.svg.
Informations Développé par 	Google et la communauté Angular.
Première version 	Septembre 2016
Dernière version 	17.3.0 (13 mars 2024)1
Dépôt 	github.com/angular/angular
Assurance qualité 	Intégration continue
Écrit en 	TypeScript, JavaScript
Système d'exploitation 	Multiplateforme
Type 	Framework JavaScript
Licence 	Licence MIT
Site web 	angular.io et angular.dev

Chronologie des versions

AngularJS

modifier - modifier le code - voir Wikidata (aide) Consultez la documentation du modèle

Angular (communément appelé « Angular 2+ » ou « Angular v2 et plus »)2,3 est un framework pour clients, open source, basé sur TypeScript et codirigé par l'équipe du projet « Angular » chez Google ainsi que par une communauté de particuliers et de sociétés. Angular est une réécriture complète d'AngularJS, cadriciel construit par la même équipe. Il permet la création d’applications Web et plus particulièrement d'applications Web monopages : des applications Web accessibles via une page Web unique qui permet de fluidifier l’expérience utilisateur et d’éviter les chargements de pages à chaque nouvelle action. Le framework est basé sur une architecture du type MVC et permet donc de séparer les données, le visuel et les actions pour une meilleure gestion des responsabilités. Un type d’architecture qui a largement fait ses preuves et qui permet une forte maintenabilité et une amélioration du travail collaboratif.
Différences avec AngularJS
L'Architecture de l'Angulaire de l'application. Les principaux blocs de construction sont des modules, des composants, des modèles, des métadonnées, la liaison de données, des directives, des services et de l'injection de dépendance.

    Angular n'a pas de notion de « portée » (scope) ou de contrôleurs ; au lieu de cela, il utilise une hiérarchie de composants comme principale caractéristique architecturale4
    Angular a une syntaxe d'expression différente, en se concentrant sur les "[ ]" pour la liaison des propriétés, et les "( )" pour la liaison des évènements5
    Modularité – beaucoup de fonctionnalités de base ont été déplacées vers des modules
    Angular recommande l'utilisation du langage TypeScript, créé par Microsoft, qui présente les caractéristiques suivantes :
        le principe de classes, à la base de la Programmation Orientée Objet
        le typage statique
        les génériques
    TypeScript est un sur-ensemble d'ECMAScript 6 (ES6) et est rétrocompatible avec ECMAScript 5 (c'est-à-dire JavaScript). Angular comprend également les principes d'ES6 suivants :
        les fonctions anonymes
        les itérateurs
        les boucles for-of
        les générateurs dans le style du langage Python
        la réflexion
    Le chargement dynamique
    La compilation asynchrone des modèles
    Les rappels itératif fournis par RxJS. RxJS limite l'état de visibilité et de débogage mais ces problèmes peuvent être résolus avec add-ons réactifs comme ngReact ou ngrx.

Historique
Nom

À l'origine, la réécriture d'AngularJS avait été appelée « Angular 2 » par l'équipe mais cela avait conduit à des confusions entre les développeurs. Pour clarifier, l'équipe a annoncé que des termes différents allaient être utilisés pour chaque framework. « AngularJS », se référant aux versions 1.X, et « Angular » (sans le « JS »), en référence aux versions 2 et plus6.
Version 2.0.0

Angular 2.0 est annoncé à la conférence ng-europe 2014, qui s'est déroulée les 22 et 23 octobre de cette même année7,8. Les changements drastiques dans la version 2.0 ont créé beaucoup de controverses parmi les développeurs9. Le 30 avril 2015, les développeurs d'Angular annoncent que la version 2 passe de la version alpha à la version d'essai pour les développeurs10. Angular 2 passe en version bêta en décembre 201511 et la première version candidate à la production est publiée en mai 201612. La version finale est publiée le 14 septembre 2016.
Version 4.0.0

Le 13 décembre 2016, Angular 4 a été annoncé ; le saut de la version 3 étant fait pour éviter une confusion en raison de l'absence d'alignement de la version du routeur qui avait déjà été distribuée en v3.3.013. La version finale a été publiée le 23 mars 201714. Angular 4 est compatible avec Angular 215.

Angular 4.3 est une version mineure, ce qui signifie qu'il ne contient pas de modifications importantes et que c'est un remplacement direct pour les versions 4.x.x.

Fonctionnalités de la version 4.3 :

    Introduction de HttpClient, bibliothèque plus petite, plus facile à utiliser et plus puissante pour faire des requêtes HTTP ;
    Nouveaux évènements du cycle de vie du routeur pour les Gardes et les Résolveurs. Quatre nouveaux évènements : GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd rejoignent l'ensemble des évènements de cycle de vie tels que NavigationStart ;
    Désactivation conditionnelle des animations.

Version 5.0.0

Angular 5 est sorti le 1er novembre 201716. Des améliorations-clés dans Angular 5 incluent le soutien des applications web progressives, un optimiseur de production et des améliorations liées à Material Design17.
Version 6.0.0

Angular 6 est sorti le 4 mai 201818. C'est une version majeure permettant de moins mettre l'accent sur le cadre sous-jacent, de plus en plus sur la suite d'outils et de rendre plus facile le passage à Angular dans le futur, avec :

    ng update,
    ng add,
    Angular Elements,
    Angular Material + CDK Components,
    Angular Material Starter Components,
    CLI Workspaces,
    Library Support,
    Tree Shakable Providers,
    Animations Performance Improvements,
    RxJS v6.

Version 7.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 7 est sorti le 18 octobre 201819.
Version 8.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 8 est sorti le 28 mai 201920.
Version 9.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 9 est sorti le 6 février 202021.

    Mise en place du moteur de rendu Ivy.

Version 10.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 10 est sorti le 24 juin 202022.
Version 11.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 11 est sorti le 10 novembre 202023.
Version 12.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 12 est sorti le 13 mai 202124.

    IE 11 est déprécié.

Version 13.0.0
Cette section est vide, insuffisamment détaillée ou incomplète. Votre aide est la bienvenue ! Comment faire ?

Angular 13 est sorti le 4 novembre 202125.

    Suppression du support d'IE 11.
    View Engine a été supprimé du mode de compilation au profit d'Ivy. Un avertissement est affiché pour les bibliothèques encore sous View Engine (Angular 12 et moins).

Version 14.0.0

Angular 14 est sorti le 2 juin 2022.

    Amélioration du support des micro-frontends
    Mise en place des composants autonomes sans ngModule.
    La validation des formulaires est maintenant typable.

Version 15.0.0

Angular 15 est sorti le 16 novembre 2022.
Version 16.0.0

Angular 16 est sorti le 3 mai 2023.
Version 17.0.0

Angular 17 a été publiée le 8 novembre 2023.

    Cette version introduit un mécanisme de flux de contrôle déclaratif.
    On notera par ailleurs que la construction des exécutables (build) a été améliorée : elle se déroule plus rapidement et apporte des gains de performance26
    De plus, la documentation a été revue.
    Mise en place d'une nouvelle syntaxe pour les templates. Par exemple :

    <ng-container *ngFor="let item of list">
      <div *ngIf="condition; else elseTemplate">
        A
      </div>
      <ng-template #elseTemplate>
        <div>
          B
        </div>
      </ng-template>
    </ng-container>

    et remplacé par :

    @for (item of list; track item) {
      @if (condition) {
        <div>A</div>
      } @else {
        <div>B</div>
      }
    }

Politique d'évolution

Chaque version est prévue pour être compatible avec la version antérieure. Google a promis de faire des mises à jour deux fois par année.
Politique de support

Toutes les versions majeures bénéficient d'une assistance pendant 18 mois. Il s'agit de 6 mois de support actif, au cours desquels des mises à jour et des correctifs sont publiés à intervalles réguliers. Elle est suivie de 12 mois de support à long terme (LTS), au cours desquels seuls les correctifs critiques et les correctifs de sécurité sont publiés27.
Notes et références

« Release 17.3.0 [archive] », 13 mars 2024 (consulté le 19 mars 2024)
(en) « Angular (2+) • r/Angular2 [archive] », sur reddit (consulté le 1er avril 2021).
Manjunath M, « AngularJS and Angular 2+ : a Detailed Comparison — SitePoint [archive] », sur Sitepoint.com, 6 avril 2018 (consulté le 26 juin 2020).
(en) « Angular [archive] », sur angular.io (consulté le 1er avril 2021).
« What’s the difference between AngularJS and Angular? [archive] », sur gorrion.io, 19 septembre 2017 (consulté le 28 janvier 2018)
« Angular: Branding Guidelines for AngularJS [archive] » (consulté le 4 mars 2017)
Coman Hamilton, « A sneak peek at the radically new Angular 2.0 [archive] » (consulté le 21 octobre 2015)
« Ng-Europe schedule [archive] »
Coman Hamilton, « Angular 2.0 announcement backfires [archive] » (consulté le 21 octobre 2015)
angularjs, « Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest [archive] », sur Twitter, 30 avril 2015 (consulté le 21 octobre 2015)
« Angular: Angular 2 Beta [archive] », sur angularjs.blogspot.it (consulté le 13 juillet 2016)
« angular/angular [archive] », sur GitHub (consulté le 4 mai 2016)
« Ok... let me explain: it's going to be Angular 4.0 [archive] », sur angularjs.blogspot.kr (consulté le 14 décembre 2016)
« Angular 4.0.0 Now Available [archive] », sur angularjs.blogspot.ca (consulté le 23 mars 2017)
« Angular 4 coming in 2017, to be backwards compatible with Angular 2 [archive] », sur react-etc.net (consulté le 14 décembre 2016)
Stephen Fluin, « Version 5.0.0 of Angular Now Available [archive] » (consulté le 2 novembre 2017)
« Angular 5 JavaScript framework delayed [archive] »
« Version 6.0.0 of Angular Now Available [archive] » (consulté le 4 mai 2018)
« Version 7 of Angular — CLI Prompts, Virtual Scroll, Drag and Drop and more [archive] » (consulté le 21 janvier 2019)
« Version 8 of Angular — Smaller bundles, CLI APIs, and alignment with the ecosystem [archive] » (consulté le 3 juin 2019)
(en) Stephen Fluin, « Version 9 of Angular Now Available— Project Ivy has arrived! [archive] », sur Medium, 10 février 2020 (consulté le 13 février 2020)
(en) Krill Paul, « What’s new in Angular 10 [archive] », sur InfoWorld, 25 juin 2020 (consulté le 26 juin 2020)
(en) Mark Thompson (@marktechson), « Version 11 of Angular Now Available [archive] », sur Medium, 4 décembre 2020 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v12 is now available [archive] », sur Medium, 16 juin 2021 (consulté le 8 février 2022)
(en) Mark Thompson (@marktechson), « Angular v13 is now Available [archive] », sur Medium, 4 novembre 2021 (consulté le 8 février 2022)
https://blog.angular.io/introducing-angular-v17-4d7033312e4b [archive]

    « Angular [archive] », sur angular.io (consulté le 5 juin 2023)

Annexes
Articles connexes

    Framework
    JHipster

Liens externes

    Site officiel [archive]

 [masquer]
v · m
Frameworks web
Python 	

    Django Flask Tornado (framework) (en) Scrapy Twisted Web2py CherryPy Pyramid TurboGears

PHP 	

    Symfony API Platform Zend Framework CodeIgniter FuelPHP Yii CakePHP QCodo Laravel Jelix Agavi Atomik Copix Kumbia PHP PRADO WebSite-PHP Phalcon

Ruby 	

    Ruby on Rails Sinatra Merb

Perl 	

    Catalyst Dancer Mojolicious

Smalltalk 	Seaside
JavaScript 	
Côté serveur 	

    Express.js Meteor

Côté client 	

    Angular AngularJS Backbone.js Cappuccino Dojo Ember.js Ext JS Meteor MooTools Prototype qooxdoo React script.aculo.us YUI Vue.js Svelte

CSS 	

    Blueprint Frameworks d'interface
        Bootstrap Foundation

Java 	

    Jakarta EE Spring Struts Tapestry Play Stripes ZK Cocoon GWT Echo AppFuse Grails RAP Wicket WebObjects Vert.x Quarkus

.NET 	

    ASP.NET ASP.NET AJAX

